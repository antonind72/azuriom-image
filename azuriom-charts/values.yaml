# Default values for azuriom-charts.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/idotek/azuriom-image
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "main"

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

#This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []

#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []

nodeSelector: {}

tolerations: []

affinity: {}


persistence:
  enabled: true
  azuriom_data:
    size: 10Gi
    accesModes: ReadWriteOnce
    storageClass: null
  azuriom_vhost:
    size: 512Mi
    accessModes: ReadWriteOnce
    storageClass: null
  azuriom_ssl:
    size: 512Mi
    accessModes: ReadWriteOnce
    storageClass: null

WEB_DOMAIN: your-domain.local
TLS_ENABLED: "False"
TLS_CERTIFICATE_FULLCHAIN_NAME: "fullchain.pem"
TLS_CERTIFIATE_PRIVKEY_NAME: "privkey.key"
APP_NAME: Azuriom
APP_ENV: production
APP_KEY: 
APP_DEBUG: false
APP_TIMEZONE: UTC
APP_URL: http://localhost
APP_LOCALE: en
APP_MAINTENANCE_DRIVER: file
# APP_MAINTENANCE_STORE: database
AZURIOM_GAME: mc-offline
BCRYPT_ROUNDS: 12
LOG_CHANNEL: stack
LOG_STACK: single
LOG_DEPRECATIONS_CHANNEL: null
LOG_LEVEL: debug
DB_CONNECTION: mysql
DB_HOST: my-mariadb.default.svc.cluster.local ## If you mariadb run in Kubernetes, please set the service address here.
DB_PORT: 3306
DB_DATABASE: azuriom
DB_USERNAME: azuriom
DB_PASSWORD: Passw@rd
SESSION_DRIVER: file
SESSION_LIFETIME: 120
SESSION_ENCRYPT: false
SESSION_PATH: /
SESSION_DOMAIN: null
BROADCAST_CONNECTION: log
FILESYSTEM_DISK: local
QUEUE_CONNECTION: sync
CACHE_DRIVER: file
CACHE_PREFIX: null
MEMCACHED_HOST: 127.0.0.1
REDIS_CLIENT: phpredis
REDIS_HOST: 127.0.0.1
REDIS_PASSWORD: null
REDIS_PORT: 6379
MAIL_MAILER: sendmail
MAIL_HOST: 127.0.0.1
MAIL_PORT: 2525
MAIL_USERNAME: null
MAIL_PASSWORD: null
MAIL_ENCRYPTION: null
MAIL_FROM_ADDRESS: "hello@example.com"
MAIL_FROM_NAME: "${APP_NAME}"
STEAM_KEY: null
EPIC_CLIENT_ID: null
EPIC_CLIENT_SECRET: null
AWS_ACCESS_KEY_ID: null
AWS_SECRET_ACCESS_KEY: null
AWS_DEFAULT_REGION: us-east-1
AWS_BUCKET: null
AWS_USE_PATH_STYLE_ENDPOINT: false